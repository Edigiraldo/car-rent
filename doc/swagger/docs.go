// Code generated by swaggo/swag. DO NOT EDIT.

package swagger

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/cars": {
            "post": {
                "description": "Register a new car with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cars"
                ],
                "summary": "Register a new car",
                "operationId": "register-car",
                "parameters": [
                    {
                        "description": "Car information (allowed types: Sedan, Luxury, Sports Car, Limousine; allowed statuses: Available, Unavailable)",
                        "name": "car",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/docs.CarRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created car",
                        "schema": {
                            "$ref": "#/definitions/docs.CarResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponseInvCityName"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponseInternalServer"
                        }
                    }
                }
            }
        },
        "/cars/": {
            "get": {
                "description": "Lists cars from a city in pages of 20 elements. from_car_id parameter\nis taken as the last seen car in a previous page.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cars"
                ],
                "summary": "List cars",
                "operationId": "list-cars",
                "parameters": [
                    {
                        "type": "string",
                        "description": "City name",
                        "name": "city",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Last seen car ID",
                        "name": "from_car_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Obtained car",
                        "schema": {
                            "$ref": "#/definitions/docs.ListCarsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponseBadRequest"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponseNotFound"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponseInternalServer"
                        }
                    }
                }
            }
        },
        "/cars/{id}": {
            "put": {
                "description": "Update a car by UUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cars"
                ],
                "summary": "Update a car",
                "operationId": "update-car",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Car UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Car information (allowed types: Sedan, Luxury, Sports Car, Limousine; allowed statuses: Available, Unavailable)",
                        "name": "car",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/docs.CarRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Updated car",
                        "schema": {
                            "$ref": "#/definitions/docs.CarResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponseBadRequest"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponseNotFound"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponseInternalServer"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a car by UUID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cars"
                ],
                "summary": "Delete a car",
                "operationId": "delete-car",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Car UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponseBadRequest"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponseNotFound"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponseInternalServer"
                        }
                    }
                }
            }
        },
        "/cars/{uuid}": {
            "get": {
                "description": "Get a car by UUID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cars"
                ],
                "summary": "Get a car",
                "operationId": "get-car",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Car UUID",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Obtained car",
                        "schema": {
                            "$ref": "#/definitions/docs.CarResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponseBadRequest"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponseNotFound"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponseInternalServer"
                        }
                    }
                }
            }
        },
        "/cities/names": {
            "get": {
                "description": "Lists the names of all the currently supported cities",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cities"
                ],
                "summary": "List cities",
                "operationId": "list-cities",
                "responses": {
                    "200": {
                        "description": "Cities name",
                        "schema": {
                            "$ref": "#/definitions/docs.ListCitiesNameResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponseInternalServer"
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "description": "Register a new user with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Register a new user",
                "operationId": "register-user",
                "parameters": [
                    {
                        "description": "User information (allowed types: Customer, Admin; allowed statuses: Active, Inactive)",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/docs.UserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created user",
                        "schema": {
                            "$ref": "#/definitions/docs.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponseBadRequest"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponseInternalServer"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "put": {
                "description": "Update a user by UUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update a user",
                "operationId": "update-user",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "User UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User information (allowed types: Customer, Admin; allowed statuses: Active, Inactive)",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/docs.UserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Updated user",
                        "schema": {
                            "$ref": "#/definitions/docs.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponseBadRequest"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponseNotFound"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponseInternalServer"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a user by UUID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete a user",
                "operationId": "delete-user",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "User UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponseBadRequest"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponseNotFound"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponseInternalServer"
                        }
                    }
                }
            }
        },
        "/users/{uuid}": {
            "get": {
                "description": "Get a user by UUID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get a user",
                "operationId": "get-user",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "User UUID",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Obtained user",
                        "schema": {
                            "$ref": "#/definitions/docs.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponseBadRequest"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponseNotFound"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs.ErrorResponseInternalServer"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "docs.CarRequest": {
            "type": "object",
            "properties": {
                "city_name": {
                    "type": "string",
                    "example": "New York"
                },
                "hourly_rent_cost": {
                    "type": "number",
                    "example": 99.99
                },
                "seats": {
                    "type": "integer",
                    "example": 4
                },
                "status": {
                    "type": "string",
                    "example": "Available"
                },
                "type": {
                    "type": "string",
                    "example": "Luxury"
                }
            }
        },
        "docs.CarResponse": {
            "type": "object",
            "properties": {
                "city_name": {
                    "type": "string",
                    "example": "New York"
                },
                "hourly_rent_cost": {
                    "type": "number",
                    "example": 99.99
                },
                "id": {
                    "type": "string",
                    "example": "bdaf243e-b4d3-49d7-8be4-5ed1fb4dba0e"
                },
                "seats": {
                    "type": "integer",
                    "example": 4
                },
                "status": {
                    "type": "string",
                    "example": "Available"
                },
                "type": {
                    "type": "string",
                    "example": "Luxury"
                }
            }
        },
        "docs.ErrorResponseBadRequest": {
            "type": "object",
            "properties": {
                "detail": {
                    "type": "string",
                    "example": "bad request"
                },
                "status": {
                    "type": "integer",
                    "example": 400
                },
                "title": {
                    "type": "string",
                    "example": "Bad Request"
                }
            }
        },
        "docs.ErrorResponseInternalServer": {
            "type": "object",
            "properties": {
                "detail": {
                    "type": "string",
                    "example": "internal server error"
                },
                "status": {
                    "type": "integer",
                    "example": 500
                },
                "title": {
                    "type": "string",
                    "example": "Internal server error"
                }
            }
        },
        "docs.ErrorResponseInvCityName": {
            "type": "object",
            "properties": {
                "detail": {
                    "type": "string",
                    "example": "city name is not valid"
                },
                "status": {
                    "type": "integer",
                    "example": 400
                },
                "title": {
                    "type": "string",
                    "example": "Bad request"
                }
            }
        },
        "docs.ErrorResponseNotFound": {
            "type": "object",
            "properties": {
                "detail": {
                    "type": "string",
                    "example": "not found"
                },
                "status": {
                    "type": "integer",
                    "example": 404
                },
                "title": {
                    "type": "string",
                    "example": "Not Found"
                }
            }
        },
        "docs.ListCarsResponse": {
            "type": "object",
            "properties": {
                "cars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/docs.CarResponse"
                    }
                }
            }
        },
        "docs.ListCitiesNameResponse": {
            "type": "object",
            "properties": {
                "cities_name": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "Chicago",
                        "Los Angeles",
                        "New York"
                    ]
                }
            }
        },
        "docs.UserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "isaac.newton@cam.ac.uk"
                },
                "first_name": {
                    "type": "string",
                    "example": "Isaac"
                },
                "last_name": {
                    "type": "string",
                    "example": "Newton"
                },
                "status": {
                    "type": "string",
                    "example": "Active"
                },
                "type": {
                    "type": "string",
                    "example": "Customer"
                }
            }
        },
        "docs.UserResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "isaac.newton@cam.ac.uk"
                },
                "first_name": {
                    "type": "string",
                    "example": "Isaac"
                },
                "id": {
                    "type": "string",
                    "example": "b6dcf3b3-ec0a-9f31-4379-4b8e7b94a387"
                },
                "last_name": {
                    "type": "string",
                    "example": "Newton"
                },
                "status": {
                    "type": "string",
                    "example": "Active"
                },
                "type": {
                    "type": "string",
                    "example": "Customer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:5050",
	BasePath:         "/api/v1/",
	Schemes:          []string{},
	Title:            "Car Rent API",
	Description:      "This is an API to manage a car rent service",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}

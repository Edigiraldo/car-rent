basePath: /api/v1/
definitions:
  docs.CarRequest:
    properties:
      city_name:
        example: New York
        type: string
      hourly_rent_cost:
        example: 99.99
        type: number
      seats:
        example: 4
        type: integer
      status:
        example: Available
        type: string
      type:
        example: Luxury
        type: string
    type: object
  docs.CarResponse:
    properties:
      city_name:
        example: New York
        type: string
      hourly_rent_cost:
        example: 99.99
        type: number
      id:
        example: bdaf243e-b4d3-49d7-8be4-5ed1fb4dba0e
        type: string
      seats:
        example: 4
        type: integer
      status:
        example: Available
        type: string
      type:
        example: Luxury
        type: string
    type: object
  docs.ErrorBadRequest:
    properties:
      detail:
        example: bad request
        type: string
      status:
        example: 400
        type: integer
      title:
        example: Bad Request
        type: string
    type: object
  docs.ErrorCarNotFound:
    properties:
      detail:
        example: car not found
        type: string
      status:
        example: 404
        type: integer
      title:
        example: Not Found
        type: string
    type: object
  docs.ErrorInternalServer:
    properties:
      detail:
        example: internal server error
        type: string
      status:
        example: 500
        type: integer
      title:
        example: Internal server error
        type: string
    type: object
  docs.ErrorInvalidCityName:
    properties:
      detail:
        example: city name is not valid
        type: string
      status:
        example: 400
        type: integer
      title:
        example: Bad request
        type: string
    type: object
  docs.ErrorInvalidReservationTimeFrame:
    properties:
      detail:
        example: reservation time frame is invalid
        type: string
      status:
        example: 400
        type: integer
      title:
        example: Bad Request
        type: string
    type: object
  docs.ErrorMinimumReservationHours:
    properties:
      detail:
        example: period is shorter than minimun allowed (6 hours)
        type: string
      status:
        example: 400
        type: integer
      title:
        example: Bad Request
        type: string
    type: object
  docs.ErrorNotFound:
    properties:
      detail:
        example: not found
        type: string
      status:
        example: 404
        type: integer
      title:
        example: Not Found
        type: string
    type: object
  docs.ErrorReservationNotFound:
    properties:
      detail:
        example: reservation was not found
        type: string
      status:
        example: 404
        type: integer
      title:
        example: Not Found
        type: string
    type: object
  docs.ListCarsResponse:
    properties:
      cars:
        items:
          $ref: '#/definitions/docs.CarResponse'
        type: array
    type: object
  docs.ListCitiesNameResponse:
    properties:
      cities_name:
        example:
        - Chicago
        - Los Angeles
        - New York
        items:
          type: string
        type: array
    type: object
  docs.ReservationRequest:
    properties:
      car_id:
        example: 0ddac1d8-c7f2-44a6-8c7e-3d06410f7be1
        type: string
      end_date:
        example: "2023-05-16T18:00:00Z"
        type: string
      payment_status:
        example: Paid
        type: string
      start_date:
        example: "2023-05-15T10:00:00Z"
        type: string
      status:
        example: Reserved
        type: string
      user_id:
        example: a29b1af4-9650-4379-8a8b-7f6c4d374e7f
        type: string
    type: object
  docs.ReservationResponse:
    properties:
      car_id:
        example: 0ddac1d8-c7f2-44a6-8c7e-3d06410f7be1
        type: string
      end_date:
        example: "2027-05-22T18:00:00Z"
        type: string
      id:
        example: 882dfcf8-98c9-4a25-9637-ae4564928b10
        type: string
      payment_status:
        example: Paid
        type: string
      start_date:
        example: "2027-05-15T10:00:00Z"
        type: string
      status:
        example: Reserved
        type: string
      user_id:
        example: a29b1af4-9650-4379-8a8b-7f6c4d374e7f
        type: string
    type: object
  docs.Reservations:
    properties:
      reservations:
        items:
          $ref: '#/definitions/docs.ReservationResponse'
        type: array
    type: object
  docs.UserRequest:
    properties:
      email:
        example: isaac.newton@cam.ac.uk
        type: string
      first_name:
        example: Isaac
        type: string
      last_name:
        example: Newton
        type: string
      status:
        example: Active
        type: string
      type:
        example: Customer
        type: string
    type: object
  docs.UserResponse:
    properties:
      email:
        example: isaac.newton@cam.ac.uk
        type: string
      first_name:
        example: Isaac
        type: string
      id:
        example: b6dcf3b3-ec0a-9f31-4379-4b8e7b94a387
        type: string
      last_name:
        example: Newton
        type: string
      status:
        example: Active
        type: string
      type:
        example: Customer
        type: string
    type: object
host: localhost:5050
info:
  contact: {}
  description: This is an API to manage a car rent service
  title: Car Rent API
  version: "1.0"
paths:
  /cars:
    post:
      consumes:
      - application/json
      description: Register a new car with the provided information
      operationId: register-car
      parameters:
      - description: 'Car information (allowed types: Sedan, Luxury, Sports Car, Limousine;
          allowed statuses: Available, Unavailable)'
        in: body
        name: car
        required: true
        schema:
          $ref: '#/definitions/docs.CarRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created car
          schema:
            $ref: '#/definitions/docs.CarResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/docs.ErrorInvalidCityName'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/docs.ErrorInternalServer'
      summary: Register a new car
      tags:
      - Cars
  /cars/:
    get:
      description: |-
        Lists cars from a city in pages of 20 elements. from_car_id parameter
        is taken as the last seen car in a previous page.
      operationId: list-cars
      parameters:
      - description: City name
        in: query
        name: city
        required: true
        type: string
      - description: Last seen car ID
        format: uuid
        in: query
        name: from_car_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Obtained car
          schema:
            $ref: '#/definitions/docs.ListCarsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/docs.ErrorBadRequest'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/docs.ErrorInternalServer'
      summary: List cars
      tags:
      - Cars
  /cars/{car_id}/reservations:
    get:
      description: Get reservations by Car id
      operationId: get-reservation-by-car
      parameters:
      - description: Car id
        format: uuid
        in: path
        name: car_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Obtained reservations
          schema:
            $ref: '#/definitions/docs.Reservations'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/docs.ErrorBadRequest'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/docs.ErrorInternalServer'
      summary: Get reservations by Car id
      tags:
      - Reservations
  /cars/{id}:
    delete:
      description: Delete a car by UUID
      operationId: delete-car
      parameters:
      - description: Car UUID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/docs.ErrorBadRequest'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/docs.ErrorCarNotFound'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/docs.ErrorInternalServer'
      summary: Delete a car
      tags:
      - Cars
    get:
      description: Get a car by UUID
      operationId: get-car
      parameters:
      - description: Car UUID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Obtained car
          schema:
            $ref: '#/definitions/docs.CarResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/docs.ErrorBadRequest'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/docs.ErrorCarNotFound'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/docs.ErrorInternalServer'
      summary: Get a car
      tags:
      - Cars
    put:
      consumes:
      - application/json
      description: Update a car by UUID
      operationId: update-car
      parameters:
      - description: Car UUID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: 'Car information (allowed types: Sedan, Luxury, Sports Car, Limousine;
          allowed statuses: Available, Unavailable)'
        in: body
        name: car
        required: true
        schema:
          $ref: '#/definitions/docs.CarRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated car
          schema:
            $ref: '#/definitions/docs.CarResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/docs.ErrorBadRequest'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/docs.ErrorCarNotFound'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/docs.ErrorInternalServer'
      summary: Update a car
      tags:
      - Cars
  /cities/names:
    get:
      description: Lists the names of all the currently supported cities
      operationId: list-cities
      produces:
      - application/json
      responses:
        "200":
          description: Cities name
          schema:
            $ref: '#/definitions/docs.ListCitiesNameResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/docs.ErrorInternalServer'
      summary: List cities
      tags:
      - Cities
  /reservations:
    post:
      consumes:
      - application/json
      description: Create a reservation with the provided information
      operationId: create-reservation
      parameters:
      - description: 'Reservation information (allowed statuses: Reserved, Canceled,
          Completed; allowed payment statuses: Paid, Pending, Canceled)'
        in: body
        name: reservation
        required: true
        schema:
          $ref: '#/definitions/docs.ReservationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created reservation
          schema:
            $ref: '#/definitions/docs.ReservationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/docs.ErrorMinimumReservationHours'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/docs.ErrorInternalServer'
      summary: Create a reservation
      tags:
      - Reservations
  /reservations/{id}:
    delete:
      description: Delete a reservation by UUID
      operationId: delete-reservation
      parameters:
      - description: Reservation UUID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/docs.ErrorBadRequest'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/docs.ErrorReservationNotFound'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/docs.ErrorInternalServer'
      summary: Delete a reservation
      tags:
      - Reservations
    get:
      description: Get a reservation by UUID
      operationId: get-reservation
      parameters:
      - description: Reservation UUID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Obtained reservation
          schema:
            $ref: '#/definitions/docs.ReservationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/docs.ErrorBadRequest'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/docs.ErrorReservationNotFound'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/docs.ErrorInternalServer'
      summary: Get a reservation
      tags:
      - Reservations
    put:
      consumes:
      - application/json
      description: Update a reservation by UUID
      operationId: update-reservation
      parameters:
      - description: Reservation UUID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: 'Reservation information (allowed statuses: Reserved, Canceled,
          Completed; allowed payment statuses: Paid, Pending, Canceled)'
        in: body
        name: reservation
        required: true
        schema:
          $ref: '#/definitions/docs.ReservationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated reservation
          schema:
            $ref: '#/definitions/docs.ReservationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/docs.ErrorInvalidReservationTimeFrame'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/docs.ErrorReservationNotFound'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/docs.ErrorInternalServer'
      summary: Update a reservation
      tags:
      - Reservations
  /users:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided information
      operationId: register-user
      parameters:
      - description: 'User information (allowed types: Customer, Admin; allowed statuses:
          Active, Inactive)'
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/docs.UserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created user
          schema:
            $ref: '#/definitions/docs.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/docs.ErrorBadRequest'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/docs.ErrorInternalServer'
      summary: Register a new user
      tags:
      - Users
  /users/{id}:
    delete:
      description: Delete a user by UUID
      operationId: delete-user
      parameters:
      - description: User UUID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/docs.ErrorBadRequest'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/docs.ErrorNotFound'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/docs.ErrorInternalServer'
      summary: Delete a user
      tags:
      - Users
    get:
      description: Get a user by UUID
      operationId: get-user
      parameters:
      - description: User UUID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Obtained user
          schema:
            $ref: '#/definitions/docs.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/docs.ErrorBadRequest'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/docs.ErrorNotFound'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/docs.ErrorInternalServer'
      summary: Get a user
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update a user by UUID
      operationId: update-user
      parameters:
      - description: User UUID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: 'User information (allowed types: Customer, Admin; allowed statuses:
          Active, Inactive)'
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/docs.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated user
          schema:
            $ref: '#/definitions/docs.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/docs.ErrorBadRequest'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/docs.ErrorNotFound'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/docs.ErrorInternalServer'
      summary: Update a user
      tags:
      - Users
  /users/{user_id}/reservations:
    get:
      description: Get reservations by User id
      operationId: get-reservation-by-user
      parameters:
      - description: User id
        format: uuid
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Obtained reservations
          schema:
            $ref: '#/definitions/docs.Reservations'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/docs.ErrorBadRequest'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/docs.ErrorInternalServer'
      summary: Get reservations by User id
      tags:
      - Reservations
swagger: "2.0"

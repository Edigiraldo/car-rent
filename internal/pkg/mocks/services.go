// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/services.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	context "context"
	reflect "reflect"

	domain "github.com/Edigiraldo/car-rent/internal/core/domain"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockCarsService is a mock of CarsService interface.
type MockCarsService struct {
	ctrl     *gomock.Controller
	recorder *MockCarsServiceMockRecorder
}

// MockCarsServiceMockRecorder is the mock recorder for MockCarsService.
type MockCarsServiceMockRecorder struct {
	mock *MockCarsService
}

// NewMockCarsService creates a new mock instance.
func NewMockCarsService(ctrl *gomock.Controller) *MockCarsService {
	mock := &MockCarsService{ctrl: ctrl}
	mock.recorder = &MockCarsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCarsService) EXPECT() *MockCarsServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCarsService) Get(ctx context.Context, id uuid.UUID) (domain.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(domain.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCarsServiceMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCarsService)(nil).Get), ctx, id)
}

// Register mocks base method.
func (m *MockCarsService) Register(ctx context.Context, car domain.Car) (domain.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, car)
	ret0, _ := ret[0].(domain.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockCarsServiceMockRecorder) Register(ctx, car interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockCarsService)(nil).Register), ctx, car)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/services.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	context "context"
	reflect "reflect"

	domain "github.com/Edigiraldo/car-rent/internal/core/domain"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockCarsService is a mock of CarsService interface.
type MockCarsService struct {
	ctrl     *gomock.Controller
	recorder *MockCarsServiceMockRecorder
}

// MockCarsServiceMockRecorder is the mock recorder for MockCarsService.
type MockCarsServiceMockRecorder struct {
	mock *MockCarsService
}

// NewMockCarsService creates a new mock instance.
func NewMockCarsService(ctrl *gomock.Controller) *MockCarsService {
	mock := &MockCarsService{ctrl: ctrl}
	mock.recorder = &MockCarsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCarsService) EXPECT() *MockCarsServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCarsService) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCarsServiceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCarsService)(nil).Delete), ctx, id)
}

// FullUpdate mocks base method.
func (m *MockCarsService) FullUpdate(ctx context.Context, dc domain.Car) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullUpdate", ctx, dc)
	ret0, _ := ret[0].(error)
	return ret0
}

// FullUpdate indicates an expected call of FullUpdate.
func (mr *MockCarsServiceMockRecorder) FullUpdate(ctx, dc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullUpdate", reflect.TypeOf((*MockCarsService)(nil).FullUpdate), ctx, dc)
}

// Get mocks base method.
func (m *MockCarsService) Get(ctx context.Context, id uuid.UUID) (domain.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(domain.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCarsServiceMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCarsService)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockCarsService) List(ctx context.Context, city, from_car_id string) ([]domain.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, city, from_car_id)
	ret0, _ := ret[0].([]domain.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCarsServiceMockRecorder) List(ctx, city, from_car_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCarsService)(nil).List), ctx, city, from_car_id)
}

// Register mocks base method.
func (m *MockCarsService) Register(ctx context.Context, car domain.Car) (domain.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, car)
	ret0, _ := ret[0].(domain.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockCarsServiceMockRecorder) Register(ctx, car interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockCarsService)(nil).Register), ctx, car)
}

// MockUsersService is a mock of UsersService interface.
type MockUsersService struct {
	ctrl     *gomock.Controller
	recorder *MockUsersServiceMockRecorder
}

// MockUsersServiceMockRecorder is the mock recorder for MockUsersService.
type MockUsersServiceMockRecorder struct {
	mock *MockUsersService
}

// NewMockUsersService creates a new mock instance.
func NewMockUsersService(ctrl *gomock.Controller) *MockUsersService {
	mock := &MockUsersService{ctrl: ctrl}
	mock.recorder = &MockUsersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersService) EXPECT() *MockUsersServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockUsersService) Get(ctx context.Context, id uuid.UUID) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUsersServiceMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUsersService)(nil).Get), ctx, id)
}

// Register mocks base method.
func (m *MockUsersService) Register(ctx context.Context, car domain.User) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, car)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUsersServiceMockRecorder) Register(ctx, car interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUsersService)(nil).Register), ctx, car)
}

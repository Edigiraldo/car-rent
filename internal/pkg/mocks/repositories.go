// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/repositories.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	context "context"
	reflect "reflect"

	domain "github.com/Edigiraldo/car-rent/internal/core/domain"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDatabase) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDatabaseMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabase)(nil).Close))
}

// GetDBHandle mocks base method.
func (m *MockDatabase) GetDBHandle() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetDBHandle")
}

// GetDBHandle indicates an expected call of GetDBHandle.
func (mr *MockDatabaseMockRecorder) GetDBHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBHandle", reflect.TypeOf((*MockDatabase)(nil).GetDBHandle))
}

// MockCarsRepo is a mock of CarsRepo interface.
type MockCarsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCarsRepoMockRecorder
}

// MockCarsRepoMockRecorder is the mock recorder for MockCarsRepo.
type MockCarsRepoMockRecorder struct {
	mock *MockCarsRepo
}

// NewMockCarsRepo creates a new mock instance.
func NewMockCarsRepo(ctrl *gomock.Controller) *MockCarsRepo {
	mock := &MockCarsRepo{ctrl: ctrl}
	mock.recorder = &MockCarsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCarsRepo) EXPECT() *MockCarsRepoMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCarsRepo) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCarsRepoMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCarsRepo)(nil).Delete), ctx, id)
}

// FullUpdate mocks base method.
func (m *MockCarsRepo) FullUpdate(ctx context.Context, dc domain.Car) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullUpdate", ctx, dc)
	ret0, _ := ret[0].(error)
	return ret0
}

// FullUpdate indicates an expected call of FullUpdate.
func (mr *MockCarsRepoMockRecorder) FullUpdate(ctx, dc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullUpdate", reflect.TypeOf((*MockCarsRepo)(nil).FullUpdate), ctx, dc)
}

// Get mocks base method.
func (m *MockCarsRepo) Get(ctx context.Context, ID uuid.UUID) (domain.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, ID)
	ret0, _ := ret[0].(domain.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCarsRepoMockRecorder) Get(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCarsRepo)(nil).Get), ctx, ID)
}

// Insert mocks base method.
func (m *MockCarsRepo) Insert(ctx context.Context, dc domain.Car) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, dc)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockCarsRepoMockRecorder) Insert(ctx, dc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockCarsRepo)(nil).Insert), ctx, dc)
}

// List mocks base method.
func (m *MockCarsRepo) List(ctx context.Context, city, from_car_id string, limit uint16) ([]domain.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, city, from_car_id, limit)
	ret0, _ := ret[0].([]domain.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCarsRepoMockRecorder) List(ctx, city, from_car_id, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCarsRepo)(nil).List), ctx, city, from_car_id, limit)
}

// MockUsersRepo is a mock of UsersRepo interface.
type MockUsersRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUsersRepoMockRecorder
}

// MockUsersRepoMockRecorder is the mock recorder for MockUsersRepo.
type MockUsersRepoMockRecorder struct {
	mock *MockUsersRepo
}

// NewMockUsersRepo creates a new mock instance.
func NewMockUsersRepo(ctrl *gomock.Controller) *MockUsersRepo {
	mock := &MockUsersRepo{ctrl: ctrl}
	mock.recorder = &MockUsersRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersRepo) EXPECT() *MockUsersRepoMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockUsersRepo) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUsersRepoMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUsersRepo)(nil).Delete), ctx, id)
}

// FullUpdate mocks base method.
func (m *MockUsersRepo) FullUpdate(ctx context.Context, du domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullUpdate", ctx, du)
	ret0, _ := ret[0].(error)
	return ret0
}

// FullUpdate indicates an expected call of FullUpdate.
func (mr *MockUsersRepoMockRecorder) FullUpdate(ctx, du interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullUpdate", reflect.TypeOf((*MockUsersRepo)(nil).FullUpdate), ctx, du)
}

// Get mocks base method.
func (m *MockUsersRepo) Get(ctx context.Context, ID uuid.UUID) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, ID)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUsersRepoMockRecorder) Get(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUsersRepo)(nil).Get), ctx, ID)
}

// Insert mocks base method.
func (m *MockUsersRepo) Insert(ctx context.Context, du domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, du)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockUsersRepoMockRecorder) Insert(ctx, du interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUsersRepo)(nil).Insert), ctx, du)
}
